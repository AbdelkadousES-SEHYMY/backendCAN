name: Deploy to EC2  
on:   
  push:     
    branches: [ main ]   
  workflow_dispatch:  
jobs:   
  deploy:     
    runs-on: ubuntu-latest          
    steps:     
    - name: Checkout code       
      uses: actions/checkout@v3            
    
    - name: Set up Python       
      uses: actions/setup-python@v4       
      with:         
        python-version: '3.9'              
    
    - name: Install dependencies       
      run: |         
        python -m pip install --upgrade pip         
        pip install -r requirements.txt              
    
    - name: Configure SSH       
      run: |         
        mkdir -p ~/.ssh/         
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/private.key         
        chmod 600 ~/.ssh/private.key         
        echo -e "Host ec2\n\tHostName ${{ secrets.EC2_HOST }}\n\tUser ${{ secrets.EC2_USER }}\n\tIdentityFile ~/.ssh/private.key\n\tStrictHostKeyChecking no" > ~/.ssh/config              
    
    - name: Create Nginx config file
      run: |
        cat > nginx.conf << 'EOF'
        server {
            listen 80;
            server_name _;
            
            location / {
                proxy_pass http://127.0.0.1:5000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
        EOF
    
    - name: Create deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        
        # Check if app directory exists, if not create it and set up the environment
        if [ ! -d "/home/${{ secrets.EC2_USER }}/app" ]; then
            echo "App directory does not exist. Setting up initial environment..."
            
            # Create app directory
            mkdir -p /home/${{ secrets.EC2_USER }}/app
            
            # Install required packages if not already installed
            if ! command -v python3 &> /dev/null; then
                sudo apt-get update
                sudo apt-get install -y python3-pip python3-venv git nginx
            fi
            
            # Set up Python virtual environment
            cd /home/${{ secrets.EC2_USER }}/app
            python3 -m venv venv
            source venv/bin/activate
            
            # Clone the repository
            git clone https://github.com/AbdelkadousES-SEHYMY/backendCAN.git .
            
            # Install dependencies
            pip install -r requirements.txt
            
            # Configure the application to listen on all interfaces
            if [ -f "app.py" ]; then
                # Check if the app is configured to listen on all interfaces
                if ! grep -q "host='0.0.0.0'" app.py; then
                    # Add host parameter to app.run() if it doesn't exist
                    sed -i "s/app.run(/app.run(host='0.0.0.0', /g" app.py
                    echo "Updated app.py to listen on all interfaces"
                fi
            fi
            
            # Set up systemd service
            sudo cp afcon-chatbot.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable afcon-chatbot
            sudo systemctl start afcon-chatbot
            
            # Set up Nginx as reverse proxy
            sudo cp ~/nginx.conf /etc/nginx/sites-available/afcon-chatbot
            
            # Enable the Nginx site
            sudo ln -sf /etc/nginx/sites-available/afcon-chatbot /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t
            sudo systemctl restart nginx
            
            # Configure firewall to allow HTTP traffic
            if command -v ufw &> /dev/null; then
                sudo ufw allow 80/tcp
                sudo ufw allow 5000/tcp
                echo "Firewall configured to allow HTTP traffic"
            fi
            
            # Set proper permissions
            sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} /home/${{ secrets.EC2_USER }}/app
            
            echo "Initial setup completed successfully!"
        else
            # Normal deployment process
            cd /home/${{ secrets.EC2_USER }}/app
            git pull origin main
            
            # Activate virtual environment
            source venv/bin/activate
            
            # Install dependencies
            pip install -r requirements.txt
            
            # Configure the application to listen on all interfaces
            if [ -f "app.py" ]; then
                # Check if the app is configured to listen on all interfaces
                if ! grep -q "host='0.0.0.0'" app.py; then
                    # Add host parameter to app.run() if it doesn't exist
                    sed -i "s/app.run(/app.run(host='0.0.0.0', /g" app.py
                    echo "Updated app.py to listen on all interfaces"
                fi
            fi
            
            # Restart the application
            sudo systemctl restart afcon-chatbot
        fi
        
        # Check if the application is running
        if sudo systemctl is-active --quiet afcon-chatbot; then
            echo "Application is running"
        else
            echo "Application failed to start. Checking logs..."
            sudo journalctl -u afcon-chatbot -n 50
        fi
        
        # Check if Nginx is running
        if sudo systemctl is-active --quiet nginx; then
            echo "Nginx is running"
        else
            echo "Nginx failed to start. Checking logs..."
            sudo journalctl -u nginx -n 50
        fi
        EOF
    
    - name: Deploy to EC2
      run: |
        # Copy files to EC2
        scp deploy.sh nginx.conf ec2:~/
        
        # Execute deployment script on EC2
        ssh ec2 "chmod +x ~/deploy.sh && ~/deploy.sh"