name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: backend-can
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Login to ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Pull the latest image
          docker pull ${{ steps.login-ecr.outputs.registry }}/backend-can:${{ github.sha }}
          
          # Stop and remove existing container
          docker stop backend-can || true
          docker rm backend-can || true
          
          # Run new container
          docker run -d \
            --name backend-can \
            -p 5000:5000 \
            -e FLASK_ENV=production \
            -e FLASK_APP=app.py \
            ${{ steps.login-ecr.outputs.registry }}/backend-can:${{ github.sha }}
          
          # Create Nginx configuration
          sudo tee /etc/nginx/sites-available/backend-can << 'EOF'
          server {
              listen 80;
              server_name api.canadaimmigration.ai;
              
              location / {
                  proxy_pass http://localhost:5000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          EOF
          
          # Enable the site and restart Nginx
          sudo ln -sf /etc/nginx/sites-available/backend-can /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl restart nginx